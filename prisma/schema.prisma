generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  investments Investment[]
  sessions    Session[]
  accounts    Account[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("accounts")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verifications")
}

enum InvestmentType {
  STOCK
  ETF
  CRYPTO
  FUND
  REAL_ESTATE
  OTHER
}

enum Currency {
  USD
  BRL
}

model Investment {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  symbol String
  name   String
  type   InvestmentType

  currentPrice Decimal @db.Decimal(18, 6)
  shares       Decimal @db.Decimal(18, 8)

  currency Currency @default(USD)

  transactions Transaction[]
  dividends    Dividend[]
  sellGainLoss SellGainLoss[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt

  @@index([userId])
  @@map("investments")
}

enum TransactionType {
  BUY
  SELL
}

model Transaction {
  id String @id @default(cuid())

  investmentId String
  investment   Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)

  type        TransactionType
  quantity    Decimal         @db.Decimal(18, 8)
  price       Decimal         @db.Decimal(18, 6)
  date        DateTime
  tax         Decimal?        @db.Decimal(18, 6) // Tax withheld from the transaction
  observation String?
  
  sellGainLoss SellGainLoss[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt

  @@index([investmentId])
  @@map("transactions")
}

model SellGainLoss {
  id String @id @default(cuid())

  investmentId String
  investment   Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  realizedProfitLoss Decimal @db.Decimal(18, 6)

  @@index([transactionId])
  @@index([investmentId])
  @@map("sell_gain_losses")
}

model Dividend {
  id String @id @default(cuid())

  investmentId String
  investment   Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)

  amount      Decimal  @db.Decimal(18, 6)
  date        DateTime
  tax         Decimal? @db.Decimal(18, 6) // Tax withheld from the dividend
  observation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("dividends")
}
